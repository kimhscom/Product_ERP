<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.happy.erp.Statement_Account">
<!-- 사용자 등록 -->
<insert id="insertAccount" parameterType="AccountDto" >
INSERT INTO ACCOUNT
(ACCOUNT_ID, ACCOUNT_PW, ACCOUNT_NAME, ACCOUNT_PHONE, ACCOUNT_EMAIL, EMPNO, ACCOUNT_POSITION, AUTH, ACCOUNT_DELFAG, ACCOUNT_REGDATE)
VALUES(#{account_id}, #{account_pw}, #{account_name}, #{account_phone}, #{account_email}, ACCOUNT_EMPNO.NEXTVAL, #{account_position}, 'U', 'N', SYSDATE)
</insert>

<!-- 사용자 중복체크 -->
<select id="idCheck" parameterType="java.lang.String" resultType="java.lang.Integer">
SELECT COUNT(ACCOUNT_ID) ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_ID=#{account_id}
</select>

<!-- 로그인 -->
<select id="getLogin" parameterType="AccountDto" resultType="AccountDto">
SELECT ACCOUNT_ID, ACCOUNT_PW, ACCOUNT_NAME, ACCOUNT_PHONE, ACCOUNT_EMAIL, EMPNO, ACCOUNT_POSITION, AUTH, ACCOUNT_DELFAG, ACCOUNT_REGDATE
FROM ACCOUNT 
WHERE UPPER(ACCOUNT_ID)=UPPER(#{account_id}) AND ACCOUNT_PW=#{account_pw} AND ACCOUNT_DELFAG='N'
</select>

<!-- 암호화된 비밀번호 가져오기 -->
<select id="selStringPw" parameterType="java.lang.String" resultType="java.lang.String">
SELECT ACCOUNT_PW FROM ACCOUNT WHERE ACCOUNT_ID=#{account_id}
</select>

<!-- 비밀번호 찾기 -->
<update id="findAccountPw" parameterType="java.util.Map">
UPDATE ACCOUNT 
SET ACCOUNT_PW=#{temp_pw} 
WHERE ACCOUNT_ID=#{account_id} AND ACCOUNT_EMAIL=#{account_email}
</update>

<!-- 비밀번호 변경 -->
<update id="changePw" parameterType="java.util.Map">
UPDATE ACCOUNT 
SET ACCOUNT_PW=#{change_pw}  
WHERE ACCOUNT_ID=#{account_id} AND ACCOUNT_PW=#{account_pw} 
</update>

<!-- 사용자 상세조회 -->
<select id="detailAccount" parameterType="java.lang.String" resultType="AccountDto">
SELECT ACCOUNT_ID, ACCOUNT_PW, ACCOUNT_NAME, ACCOUNT_PHONE, ACCOUNT_EMAIL, EMPNO, ACCOUNT_POSITION, AUTH, ACCOUNT_DELFAG, ACCOUNT_REGDATE
FROM ACCOUNT
WHERE ACCOUNT_ID=#{account_id}
</select>

<!-- 사용가능 전체조회 -->
<select id="accountList" resultType="AccountDto">
SELECT ACCOUNT_ID, ACCOUNT_PW, ACCOUNT_NAME, ACCOUNT_PHONE, ACCOUNT_EMAIL, EMPNO, ACCOUNT_POSITION, AUTH, ACCOUNT_DELFAG, ACCOUNT_REGDATE
FROM ACCOUNT
ORDER BY ACCOUNT_REGDATE DESC
</select>

<!-- 사용가능 전체조회(페이징) -->
<select id="accountListRow" parameterType="Pagination" resultType="AccountDto">
SELECT ACCOUNT_ID, ACCOUNT_PW, ACCOUNT_NAME, ACCOUNT_PHONE, ACCOUNT_EMAIL, EMPNO, ACCOUNT_POSITION, AUTH, ACCOUNT_DELFAG, ACCOUNT_REGDATE
FROM 
(SELECT ROWNUM RNUM, ACCOUNT_ID, ACCOUNT_PW, ACCOUNT_NAME, ACCOUNT_PHONE, ACCOUNT_EMAIL, EMPNO, ACCOUNT_POSITION, AUTH, ACCOUNT_DELFAG, ACCOUNT_REGDATE
FROM
(SELECT ACCOUNT_ID, ACCOUNT_PW, ACCOUNT_NAME, ACCOUNT_PHONE, ACCOUNT_EMAIL, EMPNO, ACCOUNT_POSITION, AUTH, ACCOUNT_DELFAG, ACCOUNT_REGDATE
FROM ACCOUNT
WHERE ACCOUNT_DELFAG='N' ORDER BY ACCOUNT_REGDATE DESC)
)
WHERE RNUM BETWEEN #{start} AND #{last}
</select>

<!-- 사용자 총 인원 조회 -->
<select id="accountListTotal" resultType="java.lang.Integer">
SELECT COUNT(*) FROM ACCOUNT WHERE ACCOUNT_DELFAG='N'
</select>

<!-- 사용자 정보 수정 -->
<update id="modifyAccount" parameterType="java.util.Map">
UPDATE ACCOUNT 
SET ACCOUNT_PHONE=#{account_phone}, ACCOUNT_EMAIL=#{account_email}, ACCOUNT_POSITION=#{account_position}
WHERE ACCOUNT_ID=#{account_id}
</update>

<!-- 사용자 권한 수정 -->
<update id="changeAuth" parameterType="java.util.Map">
UPDATE ACCOUNT SET AUTH=#{auth} WHERE ACCOUNT_ID=#{account_id}
</update>

<!-- 사용자 삭제 -->
<update id="deleteAccount" parameterType="java.lang.String">
UPDATE ACCOUNT SET ACCOUNT_DELFAG='Y' WHERE ACCOUNT_ID=#{account_id}
</update>

</mapper>
